{"code":"import { __spreadArray } from \"tslib\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"tslib\";\nvar InputToken = function (props) {\n    var name = props.name, onKeyDown = props.onKeyDown, length = props.length, id = props.id, className = props.className, onChange = props.onChange;\n    var _a = useState(Array(length).fill(undefined)), value = _a[0], setValue = _a[1];\n    var tokenInputRef = useRef(null);\n    useEffect(function () {\n        var newValue = Array(length).fill(\"\");\n        value.forEach(function (v, i) {\n            newValue[i] = v;\n        });\n        setValue(newValue);\n    }, [length]);\n    useEffect(function () {\n        onChange === null || onChange === void 0 ? void 0 : onChange(value.join(\"\"));\n    }, [value]);\n    var onInputChange = function (value, index) {\n        var _a, _b, _c, _d;\n        if (value) {\n            if (index < length - 1) {\n                (_b = (_a = tokenInputRef.current) === null || _a === void 0 ? void 0 : _a.children[index + 1]) === null || _b === void 0 ? void 0 : _b.focus();\n            }\n        }\n        else {\n            if (index > 0) {\n                (_d = (_c = tokenInputRef.current) === null || _c === void 0 ? void 0 : _c.children[index - 1]) === null || _d === void 0 ? void 0 : _d.focus();\n            }\n        }\n    };\n    var onInputKeyDown = function (event) {\n        if (onKeyDown)\n            onKeyDown(event);\n    };\n    return (React.createElement(\"div\", { ref: tokenInputRef, \n        // @ts-expect-error  token input container name attribute\n        name: name, tabIndex: -1, className: \"tokenInputContainer\" }, Array.from({ length: length }).map(function (_digit, idx) { return (React.createElement(\"input\", { onChange: function (e) {\n            // @ts-expect-error  token input container name attribute\n            var newValue = __spreadArray([], value, true);\n            newValue[idx] = e.target.value;\n            setValue(newValue);\n            onInputChange(e.target.value, idx);\n        }, value: value[idx], onKeyDown: onInputKeyDown, maxLength: 1, name: name && \"\".concat(name, \"[\").concat(idx, \"]\"), id: id, className: className })); })));\n};\nexport default InputToken;\n","references":["/Users/Tomi/Documents/tokenInput/node_modules/@types/react/index.d.ts","/Users/Tomi/Documents/tokenInput/node_modules/tslib/tslib.d.ts"],"dts":{"name":"/Users/Tomi/Documents/tokenInput/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/InputToken.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\nimport \"tslib\";\nexport interface IInputProps {\n    name?: string;\n    length: number;\n    id?: string;\n    className?: string;\n    onChange?: (value: string) => void;\n    onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\ndeclare const InputToken: (props: IInputProps) => React.JSX.Element;\nexport default InputToken;\n"}}
